{
  "contractName": "DividendComputation",
  "abi": [
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610748806100206000396000f3fe608060405261000c610011565b61026f565b60443560805260643560a052610184356101040180357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101243506816101443506826101643506621000008211156100715761019060005260206000fd5b621000008111156100885761019060005260206000fd5b6024356102a052816102c052806102e0526100a385876104f4565b608085026103000160005b600381101561023a5760c081026020890101600060208201358760018511600181146100df5780156100fc57610101565b8a8b8a60c08803358e03098c8a61017f1989013509089350610101565b843593505b5089600051068a81850993508a81840992508a818b099150602060002060005261012c838587610445565b60406080860160e0376040808601602037818b0361012052836060528260c05260406101a0606060e060075afa60406101206060602060075afa1660406101606060608060075afa166040610160608061012060065afa16604088608061016060065afa168615156101d857602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b6000871115610212578260605260406102206060602060075afa166040610260608061022060065afa1660406101e060806101a060065afa165b8015156102255761019060005260206000fd5b505050604094909401935050506001016100ae565b506102456084610274565b61029f1981016102a0208590068481146102655761019460005260206000fd5b5050505050505050565b610440565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a1517171717171717156103525761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104375761019060005260206000fd5b50505050505050565b6104ef565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156104e45761019060005260206000fd5b505050505050505050565b61052b565b60005b8281101561051d57606060c08202830101608081608084026103000137506001016104f7565b505060800261030020600052565b610533610535565b005b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260a06102005260006102405260008061026052610280856020820152602086026102c00160005b878110156106195760c0810260208b0101608060408201600037608060002060c05260a083528735602084015260c05160408401526040606084015260ff60020a600160608301351602604082013517608084015260ff60020a600160a0830135160260808201351760a08401528383036020830260408601015260c0830192505060018101905061058c565b50908103601f1981016102805260a00161022052858703602080830182905260409102820101865b888110156106ee5760c0810260208b0101602089830302860135806040880301356080604084016000378060a001855260208b85030289013560208601526080600020604086015280604001606086015260ff60020a6001602051160260005117608086015260ff60020a600160605116026040511760a08601528060208903830160c087013785850360208c860302604088010152602085510185019450505050600181019050610641565b5060208282030382526102808103806080016101e0528060e001610180526020610160528061012001610160f3fea165627a7a72305820042ebfbc42e69169673e07c2b750fedf9dbadd7e47611bd31e37ea92687041fb0029",
  "deployedBytecode": "0x608060405261000c610011565b61026f565b60443560805260643560a052610184356101040180357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101243506816101443506826101643506621000008211156100715761019060005260206000fd5b621000008111156100885761019060005260206000fd5b6024356102a052816102c052806102e0526100a385876104f4565b608085026103000160005b600381101561023a5760c081026020890101600060208201358760018511600181146100df5780156100fc57610101565b8a8b8a60c08803358e03098c8a61017f1989013509089350610101565b843593505b5089600051068a81850993508a81840992508a818b099150602060002060005261012c838587610445565b60406080860160e0376040808601602037818b0361012052836060528260c05260406101a0606060e060075afa60406101206060602060075afa1660406101606060608060075afa166040610160608061012060065afa16604088608061016060065afa168615156101d857602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b6000871115610212578260605260406102206060602060075afa166040610260608061022060065afa1660406101e060806101a060065afa165b8015156102255761019060005260206000fd5b505050604094909401935050506001016100ae565b506102456084610274565b61029f1981016102a0208590068481146102655761019460005260206000fd5b5050505050505050565b610440565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a1517171717171717156103525761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104375761019060005260206000fd5b50505050505050565b6104ef565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156104e45761019060005260206000fd5b505050505050505050565b61052b565b60005b8281101561051d57606060c08202830101608081608084026103000137506001016104f7565b505060800261030020600052565b610533610535565b005b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260a06102005260006102405260008061026052610280856020820152602086026102c00160005b878110156106195760c0810260208b0101608060408201600037608060002060c05260a083528735602084015260c05160408401526040606084015260ff60020a600160608301351602604082013517608084015260ff60020a600160a0830135160260808201351760a08401528383036020830260408601015260c0830192505060018101905061058c565b50908103601f1981016102805260a00161022052858703602080830182905260409102820101865b888110156106ee5760c0810260208b0101602089830302860135806040880301356080604084016000378060a001855260208b85030289013560208601526080600020604086015280604001606086015260ff60020a6001602051160260005117608086015260ff60020a600160605116026040511760a08601528060208903830160c087013785850360208c860302604088010152602085510185019450505050600181019050610641565b5060208282030382526102808103806080016101e0528060e001610180526020610160528061012001610160f3fea165627a7a72305820042ebfbc42e69169673e07c2b750fedf9dbadd7e47611bd31e37ea92687041fb0029",
  "sourceMap": "943:18233:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;943:18233:6;;;;;;;",
  "deployedSourceMap": "943:18233:6:-;;;1715:29;;;;2703:10328;;;2956:4;2943:18;2937:4;2930:32;3005:4;2992:18;2986:4;2979:32;3065:5;3052:19;3045:5;3041:31;3111:5;3098:19;3151:66;3292:9;3284:5;3271:19;3267:35;3355:9;3347:5;3334:19;3330:35;3417:9;3409:5;3396:19;3392:35;3496:7;3492:2;3489:15;3486:2;;;3540:3;3534:4;3527:17;3578:4;3572;3565:18;3486:2;3669:7;3665:2;3662:15;3659:2;;;3713:3;3707:4;3700:17;3751:4;3745;3738:18;3659:2;4193:4;4180:18;4173:5;4166:33;4230:2;4223:5;4216:17;4264:2;4257:5;4250:17;4285:25;4308:1;4301:5;4285:25;;;4355:4;4352:1;4348:12;4341:5;4337:24;4834:1;4819:7554;4844:1;4841;4838:8;4819:7554;;;5035:4;5032:1;5028:12;5021:4;5014:5;5010:16;5006:35;;6367:4;6356:9;6352:20;6339:34;6403:9;6447:1;6444;6441:8;6475:1;6470:753;;;;7245:249;;;;6434:1060;;6470:753;7184:9;7121;7077:2;7028:4;7017:9;7013:20;7000:34;6989:9;6985:50;6937:194;6876:9;6832:2;-1:-1:-1;;6758:31:6;;6745:45;6697:189;6653:541;6648:546;;6470:753;;7245:249;7462:9;7449:23;7444:28;;6434:1060;;7620:9;7613:4;7607:11;7603:27;7717:9;7714:1;7711;7704:23;7699:28;;7772:9;7769:1;7766;7759:23;7754:28;;7835:9;7832:1;7821:9;7814:31;7809:36;;7942:4;7936;7926:21;7920:4;7913:35;8082;8115:1;8112;8101:9;8082:35;;;8728:4;8721;8710:9;8706:20;8700:4;8687:46;8797:4;8790;8779:9;8775:20;8769:4;8756:46;8852:1;8841:9;8837:17;8830:5;8823:32;8889:1;8883:4;8876:15;8926:1;8920:4;8913:15;9526:4;9519:5;9513:4;9507;9504:1;9499:3;9488:43;9628:4;9621:5;9615:4;9609;9606:1;9601:3;9590:43;9578:56;9730:4;9723:5;9717:4;9711;9708:1;9703:3;9692:43;9680:56;10026:4;10019:5;10013:4;10006:5;10003:1;9998:3;9987:44;9975:57;10447:4;10444:1;10438:4;10431:5;10428:1;10423:3;10412:40;10400:53;10893:8;;10890:2;;;10957:4;10951:11;10944:5;10937:26;11008:4;11002:11;10995:5;10988:26;11059:4;11053:11;11046:5;11039:26;11239:5;11233:12;11165:66;11161:85;11126:5;11090:186;10890:2;11586:1;11583;11580:8;11577:2;;;11637:1;11631:4;11624:15;11724:4;11717:5;11711:4;11705;11702:1;11697:3;11686:43;11674:56;11908:4;11901:5;11895:4;11888:5;11885:1;11880:3;11869:44;11857:57;12090:4;12083:5;12077:4;12070:5;12067:1;12062:3;12051:44;12039:57;11577:2;12236:6;12229:14;12226:2;;;12259:3;12253:4;12246:17;12277:4;12271;12264:18;12226:2;-1:-1:-1;;;12317:4:6;12310:12;;;;;-1:-1:-1;;;4861:4:6;4854:12;4819:7554;;;4823:14;12412:21;12428:4;12412:21;;;-1:-1:-1;;12784:13:6;;12791:5;12767:31;12763:47;;;12839:23;;;12829:2;;12956:3;12950:4;12943:17;12994:4;12988;12981:18;12829:2;2742:10289;;;;;;;;;;13266:2490;;;13332:66;13442:2;13429:16;13497:4;13493:2;13489:13;13476:27;13555:4;13551:2;13547:13;13534:27;13613:4;13609:2;13605:13;13592:27;14208:65;14200:6;14197:77;14107:66;14099:6;14096:78;14006:66;13998:6;13995:78;13905:66;13897:6;13894:78;13864:6;13857:14;13827:6;13820:14;13790:6;13783:14;13754:6;13747:14;13723:75;13720:115;13717:155;13714:259;13711:363;13708:467;13705:570;13702:2;;;14327:3;14321:4;14314:17;14365:4;14359;14352:18;13702:2;14740:5;14734:12;14728:4;14721:26;14806:5;14800:12;14794:4;14787:26;14866:66;14860:4;14853:80;14963:66;14957:4;14950:80;15060:66;15054:4;15047:80;15157:65;15151:4;15144:79;15259:5;15253:12;15247:4;15240:26;15326:5;15320:12;15313:5;15306:27;15387:6;15380:5;15373:21;15425:6;15418:5;15411:21;15463:6;15456:5;15449:21;15501:6;15494:5;15487:21;15579:4;15573;15566:5;15560:4;15557:1;15552:3;15541:43;15638:4;15632:11;15625:19;15615:7;15608:15;15605:40;15602:2;;;15681:3;15675:4;15668:17;15719:4;15713;15706:18;15602:2;13295:2461;;;;;;;;;16100:2026;;;16175:66;16277;16397:4;16391;16387:15;16374:29;16457:4;16451;16447:15;16434:29;16517:4;16511;16507:15;16494:29;16577:4;16571;16567:15;16554:29;17907:11;17899:6;17891;17884:35;17838:11;17799:1;17749:11;17741:6;17727:11;17719:6;17711;17704:35;17697:64;17653:197;17599:350;17527:11;17519:6;17511;17504:35;17458:11;17418:1;17367:11;17359:6;17345:11;17337:6;17329;17322:35;17315:64;17271:199;17217:352;17184:791;17065:1;17062;17059:8;16991:1;16979:9;16976:1;16972:17;16969:24;16932:200;16826:1;16823;16820:8;16752:1;16740:9;16737:1;16733:17;16730:24;16693:209;16660:498;16631:1366;16603:1412;16600:2;;;18051:3;18045:4;18038:17;18089:4;18083;18076:18;16600:2;16140:1986;;;;;;;;;;;18762:340;;;18830:1;18815:212;18840:1;18837;18834:8;18815:212;;;18931:4;18923;18920:1;18916:12;18909:5;18905:24;18901:35;19004:4;18997:5;18989:4;18986:1;18982:12;18975:5;18971:24;18958:51;-1:-1:-1;18857:4:6;18850:12;18815:212;;;-1:-1:-1;;19081:4:6;19074:12;19067:5;19057:30;19051:4;19044:44;18797:305;;19122:45;:43;:45::i;:::-;943:18233;852:8678:7;1001:5;988:19;981:5;977:31;1043:5;1030:19;1071:1;1128:5;1115:19;1108:5;1104:31;1229:5;1216:19;1209:5;1205:31;1326:5;1313:19;1306:5;1302:31;3256:4;3249:5;3242:19;3335:4;3328:5;3321:19;3469:4;3462:5;3455:19;3608:4;3601:5;3594:19;3829:1;3857:7;3850:5;3843:22;3895:5;3996:1;3989:4;3979:8;3975:19;3968:30;4165:4;4162:1;4158:12;4151:5;4147:24;4200:1;4185:1945;4210:1;4207;4204:8;4185:1945;;;4299:4;4296:1;4292:12;4285:4;4278:5;4274:16;4270:35;4412:4;4405;4394:9;4390:20;4384:4;4371:46;4523:4;4517;4507:21;4501:4;4494:35;4601:4;4598:1;4591:15;4707:11;4694:25;4687:4;4684:1;4680:12;4673:47;4826:4;4820:11;4813:4;4810:1;4806:12;4799:33;4953:4;4946;4943:1;4939:12;4932:26;-1:-1:-1;;;5246:4:7;5238;5227:9;5223:20;5210:34;5206:45;5181:180;5153:4;5142:9;5138:20;5125:34;5101:278;5078:4;5075:1;5071:12;5047:350;-1:-1:-1;;;5685:4:7;5677;5666:9;5662:20;5649:34;5645:45;5620:180;5592:4;5581:9;5577:20;5564:34;5540:278;5517:4;5514:1;5510:12;5486:350;5991:8;5988:1;5984:16;5976:4;5973:1;5969:12;5962:4;5952:8;5948:19;5944:38;5937:64;6111:4;6108:1;6104:12;6099:17;;4235:1895;4227:4;4224:1;4220:12;4215:17;;4185:1945;;;-1:-1:-1;6219:16:7;;;-1:-1:-1;;6215:27:7;;6208:5;6201:42;6340:4;6336:27;6329:5;6322:42;6478:9;;;6237:4;6457:19;;;6450:38;;;6549:4;6555:20;;6538:39;;;6478:9;6619:2311;6644:1;6641;6638:8;6619:2311;;;6767:4;6764:1;6760:12;6753:4;6746:5;6742:16;6738:35;6896:4;6892:1;6889;6885:9;6881:20;6871:8;6867:35;6854:49;7020:13;7013:4;7003:8;6999:19;6995:39;6982:53;7143:4;7136;7125:9;7121:20;7115:4;7102:46;7250:14;7244:4;7240:25;7237:1;7230:36;7411:4;7407:1;7404;7400:9;7396:20;7382:12;7378:39;7365:53;7358:4;7355:1;7351:12;7344:75;7508:4;7502;7492:21;7485:4;7482:1;7478:12;7471:43;7622:14;7616:4;7612:25;7605:4;7602:1;7598:12;7591:47;-1:-1:-1;;;7904:4:7;7897;7891:11;7887:22;7854:177;7823:4;7817:11;7789:264;7762:4;7759:1;7755:12;7727:344;-1:-1:-1;;;8317:4:7;8310;8304:11;8300:22;8271:165;8244:4;8238:11;8214:240;8191:4;8188:1;8184:12;8160:312;8606:14;8598:4;8588:8;8584:19;8569:13;8565:39;8558:4;8555:1;8551:12;8538:83;8784:8;8781:1;8777:16;8769:4;8765:1;8762;8758:9;8754:20;8747:4;8737:8;8733:19;8729:46;8722:72;8910:4;8906:1;8900:8;8896:19;8893:1;8889:27;8884:32;;6669:2261;;;6661:4;6658:1;6654:12;6649:17;;6619:2311;;;6623:14;9052:4;9041:8;9038:1;9034:16;9030:27;9020:8;9013:45;9152:5;9149:1;9145:13;9195:11;9189:4;9185:22;9178:5;9171:37;9285:11;9279:4;9275:22;9268:5;9261:37;9427:4;9420:5;9413:19;9470:11;9463:5;9459:23;9452:5;9445:38",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nimport \"./DividendComputationABIEncoder.sol\";\n\n\nlibrary DividendComputationInterface {\n    function validateDividendComputation(\n        bytes calldata,\n        address,\n        uint[6] calldata\n    ) \n        external\n        pure\n        returns (bytes memory) \n    {}\n}\n\n/**\n * @title Library to validate AZTEC dividend computation proofs\n * @author AZTEC\n * @dev Don't include this as an internal library. This contract uses a static memory table \n * to cache elliptic curve primitives and hashes.\n * Calling this internally from another function will lead to memory mutation and undefined behaviour.\n * The intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC \n * can be treated as pure functions as this contract contains no storage and makes no external calls \n * (other than to precompiles).\n * Copyright Spilbury Holdings Ltd 2018. All rights reserved.\n **/\ncontract DividendComputation {\n    /**\n     * @dev This will take any dividend calculation proof data and attempt to verify it in zero-knowledge\n     * If the proof is not valid, the transaction will throw.\n     * @notice See DividendComputationInterface for how method calls should be constructed.\n     * DividendComputation is written in YUL to enable manual memory management and for other efficiency savings.\n     **/\n    function() external payable {\n        assembly {\n\n            // We don't check for function signatures, there's only one function \n            // that ever gets called: validateDividendCalc()\n            // We still assume calldata is offset by 4 bytes so that we can \n            // represent this contract through a compatible ABI\n            validateDividendComputation()\n\n            /**\n             * New calldata map\n             * 0x04:0x24      = calldata location of proofData byte array  // proof data byte array\n             * 0x24:0x44      = message sender // address\n             * 0x44:0x64      = h_x     // crs\n             * 0x64:0x84      = h_y     // crs\n             * 0x84:0xa4      = t2_x0   // crs\n             * 0xa4:0xc4      = t2_x1   // crs\n             * 0xc4:0xe4      = t2_y0   // crs\n             * 0xe4:0x104     = t2_y1   // crs\n             * 0x104:0x124    = length of proofData byte array\n             * 0x124:0x144    = challenge\n             * 0x144:0x164    = za\n             * 0x164:0x184    = zb\n             * 0x184:0x1a4    = offset in byte array to notes\n             * 0x1a4:0x1c4    = offset in byte array to inputOwners\n             * 0x1c4:0x1e4    = offset in byte array to outputOwners\n             * 0x1e4:0x204    = offset in byte array to metadata\n             */ \n\n            function validateDividendComputation() {\n                \n                /*\n                ///////////////////////////////////////////  SETUP  //////////////////////////////////////////////\n                */\n                mstore(0x80, calldataload(0x44))\n                mstore(0xa0, calldataload(0x64))\n                let notes := add(0x104, calldataload(0x184))\n                let n := calldataload(notes)\n                let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                \n                let challenge := mod(calldataload(0x124), gen_order)\n\n                let za := mod(calldataload(0x144), gen_order)\n                let zb := mod(calldataload(0x164), gen_order)\n\n\n                // Check that za < kMax\n                if gt(za, 1048576) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n\n                // Check that zb < kMax\n                if gt(zb, 1048576) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n\n                /*\n                m is the deliminator between input and output notes. \n                We only have one input note, and then the next two are output notes.\n\n                m = 0 and n = 3\n\n                Variables not defined and instead hard-coded, to save on stack depth\n                */\n\n                // add caller, za and zb to final hash table\n                mstore(0x2a0, calldataload(0x24))\n                mstore(0x2c0, za)\n                mstore(0x2e0, zb)\n\n                hashCommitments(notes, n) \n                let b := add(0x300, mul(n, 0x80)) \n\n                /*\n                ///////////////////////////  CALCULATE BLINDING FACTORS  /////////////////////////////////////\n                */\n\n                // Iterate over every note and calculate the blinding factor B_i = \\gamma_i^{kBar}h^{aBar}\\sigma_i^{-c}.\n                // We use the AZTEC protocol pairing optimization to reduce the number of pairing comparisons to 1.\n                // This adds some minor alterations\n                for { let i := 0 } lt(i, 3) { i := add(i, 0x01) } {\n\n                    // Get the calldata index of this note - call data location of start of note\n                    let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n\n                    // Define variables k, a and c.\n                    // If i <= m then - input notes\n                    //   k = kBar_i\n                    //   a = aBar_i\n                    //   c = challenge\n                    // If i > m then we add a modification for the pairing optimization\n                    //   k = kBar_i * x_i\n                    //   a = aBar_i * x_i\n                    //   c = challenge * x_i\n                    // Set j = i - (m + 1). - index to count the output commitment\n                    // x_0 = 1\n                    // x_1 = keccak256(input string)\n                    // all other x_{j} = keccak256(x_{j-1})\n                    // The reason for doing this is that the point  \\sigma_i^{-cx_j} can be re-used in the pairing check\n                    // Instead of validating e(\\gamma_i, t_2) == e(\\sigma_i, g_2) for all i = [m+1,\\ldots,n]\n                    // We instead validate:\n                    // e(\\Pi_{i=m+1}^{n}\\gamma_i^{-cx_j}, t_2) == e(\\Pi_{i=m+1}^{n}\\sigma_i^{cx_j}, g_2).\n                    // x_j is a pseudorandom variable whose entropy source is the input string, allowing for\n                    // a sum of commitment points to be evaluated in one pairing comparison\n\n                    let k\n                    let a := calldataload(add(noteIndex, 0x20))\n                    let c := challenge\n\n                    switch gt(i, 1)\n                    case 1 { // output note\n                        /*\n                        Enforce the condition k_3 = (k_1)(z_b) - (k_2)(z_a)\n                        */\n                        k := addmod(\n                                    mulmod(\n                                        calldataload(sub(noteIndex, add(0xc0, 0xc0))),\n                                        zb,\n                                        gen_order), // k_1 * z_b\n                                    mulmod(\n                                        sub(gen_order, calldataload(sub(noteIndex, 0xc0))),\n                                        za,\n                                        gen_order), //-(k_2 * z_a)\n                                    gen_order)       \n                    }\n\n                    case 0 { // input note\n                        /*\n                        Input commitments just have the k factors as according to the note data\n                        */  \n                        k := calldataload(noteIndex)\n                    }\n\n\n                    // Set k = kx_j, a = ax_j, c = cx_j, where j = i - (m+1)\n                    let x := mod(mload(0x00), gen_order) // x is the kecca hash of the input commitments\n                    k := mulmod(k, x, gen_order) // kx\n                    a := mulmod(a, x, gen_order) // ax\n                    c := mulmod(challenge, x, gen_order) // cx\n                    // calculate x_{j+1}\n                    mstore(0x00, keccak256(0x00, 0x20)) // rehashing the kecca hash, for use in the next x\n\n\n                    // Check this commitment is well formed\n                    validateCommitment(noteIndex, k, a)\n\n                    // Calculate the G1 element \\gamma_i^{k}h^{a}\\sigma_i^{-c} = B_i - already has all x stuff\n                    // Memory map:\n                    // 0x20: \\gamma_iX\n                    // 0x40: \\gamma_iY\n                    // 0x60: k_i\n                    // 0x80: hX\n                    // 0xa0: hY\n                    // 0xc0: a_i\n                    // 0xe0: \\sigma_iX\n                    // 0x100: \\sigma_iY\n                    // 0x120: -c\n\n                    // loading key variables into memory to be operated on later\n                    calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)  \n                    calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n                    mstore(0x120, sub(gen_order, c))\n                    mstore(0x60, k) \n                    mstore(0xc0, a)\n\n                    // Call bn128 scalar multiplication precompiles\n                    // Represent point + multiplication scalar in 3 consecutive blocks of memory\n                    // Store \\sigma_i^{-c} at 0x1a0:0x200\n                    // Store \\gamma_i^{k} at 0x120:0x160\n                    // Store h^{a} at 0x160:0x1a0\n                    \n                    // result is a boolean. It keeps track of whether the call to the pre-compile was \n                    // successful. True if it was, False if it wasn't\n                    let result := staticcall(gas, 7, 0xe0, 0x60, 0x1a0, 0x40) // sigma_i^{-c}\n                    result := and(result, staticcall(gas, 7, 0x20, 0x60, 0x120, 0x40)) // gamma_i^{k}\n                    result := and(result, staticcall(gas, 7, 0x80, 0x60, 0x160, 0x40)) // h^{a}\n\n                    // Call bn128 group addition precompiles\n                    // \\gamma_i^{k} and h^{a} in memory block 0x120:0x1a0\n                    // Store result of addition at 0x160:0x1a0\n                    result := and(result, staticcall(gas, 6, 0x120, 0x80, 0x160, 0x40))\n\n                    // \\gamma_i^{k}h^{a} and \\sigma^{-c} in memory block 0x160:0x1e0\n                    // Store resulting point B at memory index b\n                    // index b points to the end of the block of memory containing commitments\n                    // we're appending blinding factors to the end of the commitment block\n                    result := and(result, staticcall(gas, 6, 0x160, 0x80, b, 0x40))\n\n                    // We have \\sigma^{-c} at 0x1a0:0x200\n                    // And \\sigma_{acc} at 0x1e0:0x200\n                    // If i = m + 1 (i.e. first output note)\n                    // then we set \\gamma_{acc} and \\sigma_{acc} to \\gamma_i, -\\sigma_i\n                    // the accumulator is the variable that is used to condense the various pairing\n                    // comparisons into a single one\n                    if eq(i, 0) { // m = 0\n                        mstore(0x260, mload(0x20))\n                        mstore(0x280, mload(0x40))\n                        mstore(0x1e0, mload(0xe0))\n                        mstore(\n                            0x200,\n                            sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100))\n                            )\n                    }\n\n                    // If i > m + 1 (i.e. subsequent output notes)\n                    // then we add \\sigma^{-c} and \\sigma_{acc} and store result at \\sigma_{acc} (0x1e0:0x200)\n                    // we then calculate \\gamma^{cx} and add into \\gamma_{acc}\n                    if gt(i, 0) { // m = 0\n                        mstore(0x60, c)\n                        result := and(result, staticcall(gas, 7, 0x20, 0x60, 0x220, 0x40))\n\n                       // \\gamma_i^{cx} now at 0x220:0x260, \\gamma_{acc} is at 0x260:0x2a0\n                        result := and(result, staticcall(gas, 6, 0x220, 0x80, 0x260, 0x40))\n\n                       // add \\sigma_i^{-cx} and \\sigma_{acc} into \\sigma_{acc} at 0x1e0\n                        result := and(result, staticcall(gas, 6, 0x1a0, 0x80, 0x1e0, 0x40))\n                    }\n\n                    // throw transaction if any calls to precompiled contracts failed\n                    if iszero(result) { mstore(0x00, 400) revert(0x00, 0x20) }\n                    b := add(b, 0x40) // increase B pointer by 2 words\n                }\n                \n\n                    validatePairing(0x84)\n\n                // We now have the message sender, z_a, z_b, note commitments and the \n                // calculated blinding factors in a block of memory starting at 0x2a0, of size (b - 0x2a0).\n                // Hash this block to reconstruct the initial challenge and validate that they match\n                let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n\n\n                if iszero(eq(expected, challenge)) {\n                    \n                    // Proof failed\n                    mstore(0x00, 404)\n                    revert(0x00, 0x20)\n                }\n            }\n\n            /**        \n             * @dev evaluate if e(P1, t2) . e(P2, g2) == 0.\n             * @notice we don't hard-code t2 so that contracts that call this library can use different trusted setups.\n             **/\n            function validatePairing(t2) {\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let t2_x_1 := calldataload(t2)\n                let t2_x_2 := calldataload(add(t2, 0x20))\n                let t2_y_1 := calldataload(add(t2, 0x40))\n                let t2_y_2 := calldataload(add(t2, 0x60))\n\n                // check provided setup pubkey is not zero or g2\n                if or(or(or(or(or(or(or(\n                    iszero(t2_x_1),\n                    iszero(t2_x_2)),\n                    iszero(t2_y_1)),\n                    iszero(t2_y_2)),\n                    eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)),\n                    eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)),\n                    eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)),\n                    eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n                {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n\n                // store coords in memory\n                // indices are a bit off, scipr lab's libff limb ordering (c0, c1) is opposite\n                // to what precompile expects. We can overwrite the memory we used previously as this function\n                // is called at the end of the validation routine.\n                mstore(0x20, mload(0x1e0)) // sigma accumulator x\n                mstore(0x40, mload(0x200)) // sigma accumulator y\n                mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n                mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n                mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n                mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n                mstore(0xe0, mload(0x260)) // gamma accumulator x\n                mstore(0x100, mload(0x280)) // gamma accumulator y\n                mstore(0x140, t2_x_1)\n                mstore(0x120, t2_x_2)\n                mstore(0x180, t2_y_1)\n                mstore(0x160, t2_y_2)\n\n                let success := staticcall(gas, 8, 0x20, 0x180, 0x20, 0x20)\n\n                if or(iszero(success), iszero(mload(0x20))) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n            }\n\n            /**\n             * @dev check that this note's points are on the altbn128 curve(y^2 = x^3 + 3)\n             * and that signatures 'k' and 'a' are modulo the order of the curve. \n             * Transaction will throw if this is not the case.\n             * @param note the calldata loation of the note\n             **/\n            function validateCommitment(note, k, a) {\n                let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let gammaX := calldataload(add(note, 0x40))\n                let gammaY := calldataload(add(note, 0x60))\n                let sigmaX := calldataload(add(note, 0x80))\n                let sigmaY := calldataload(add(note, 0xa0))\n                if iszero(\n                    and(\n                        and(\n                            and(\n                                eq(mod(a, gen_order), a), // a is modulo generator order?\n                                gt(a, 1)                  // can't be 0 or 1 either!\n                            ),\n                            and(\n                                eq(mod(k, gen_order), k), // k is modulo generator order?\n                                gt(k, 1)                  // and not 0 or 1\n                            )\n                        ),\n                        and(\n                            eq( // y^2 ?= x^3 + 3\n                                addmod(\n                                    mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), \n                                    3, \n                                    field_order),\n                                mulmod(sigmaY, sigmaY, field_order)\n                            ),\n                            eq( // y^2 ?= x^3 + 3\n                                addmod(\n                                    mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order),\n                                    3,\n                                    field_order),\n                                mulmod(gammaY, gammaY, field_order)\n                            )\n                        )\n                    )\n                ) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n            }\n\n            /**\n             * @dev Calculate the keccak256 hash of the commitments for both input notes and output notes.\n             * This is used both as an input to validate the challenge `c` and also \n             * to generate pseudorandom relationships between commitments for different outputNotes, so \n             * that we can combine them into a single multi-exponentiation for the purposes of \n             * validating the bilinear pairing relationships.\n             * @param notes calldata location of notes\n             * @param n number of notes\n             * \n             * @notice\n             */\n\n            function hashCommitments(notes, n) {\n                for { let i := 0 } lt(i, n) { i := add(i, 0x01) } { \n                    let index := add(add(notes, mul(i, 0xc0)), 0x60) \n                    calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n                }\n                mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n            }\n        }\n\n        DividendComputationABIEncoder.encodeAndExit();\n    }\n}\n",
  "sourcePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/dividendComputation/DividendComputation.sol",
  "ast": {
    "absolutePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/dividendComputation/DividendComputation.sol",
    "exportedSymbols": {
      "DividendComputation": [
        1229
      ],
      "DividendComputationInterface": [
        1218
      ]
    },
    "id": 1230,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1202,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:6"
      },
      {
        "absolutePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
        "file": "./DividendComputationABIEncoder.sol",
        "id": 1203,
        "nodeType": "ImportDirective",
        "scope": 1230,
        "sourceUnit": 1258,
        "src": "33:45:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1218,
        "linearizedBaseContracts": [
          1218
        ],
        "name": "DividendComputationInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1216,
              "nodeType": "Block",
              "src": "301:2:6",
              "statements": []
            },
            "documentation": null,
            "id": 1217,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateDividendComputation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1205,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1217,
                  "src": "170:14:6",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1204,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "170:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1207,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1217,
                  "src": "194:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1206,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "194:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1211,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1217,
                  "src": "211:16:6",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$6_calldata_ptr",
                    "typeString": "uint256[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1208,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "211:4:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1210,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 1209,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "216:1:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "211:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$6_storage_ptr",
                      "typeString": "uint256[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "160:73:6"
            },
            "returnParameters": {
              "id": 1215,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1214,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1217,
                  "src": "282:12:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1213,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "282:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "281:14:6"
            },
            "scope": 1218,
            "src": "124:179:6",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1230,
        "src": "81:224:6"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Library to validate AZTEC dividend computation proofs\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table \nto cache elliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC \ncan be treated as pure functions as this contract contains no storage and makes no external calls \n(other than to precompiles).\nCopyright Spilbury Holdings Ltd 2018. All rights reserved.*",
        "fullyImplemented": true,
        "id": 1229,
        "linearizedBaseContracts": [
          1229
        ],
        "name": "DividendComputation",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1227,
              "nodeType": "Block",
              "src": "1397:17777:6",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1221,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    validateDividendComputation()\n    function validateDividendComputation()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x184))\n        let n := calldataload(notes)\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x124), gen_order)\n        let za := mod(calldataload(0x144), gen_order)\n        let zb := mod(calldataload(0x164), gen_order)\n        if gt(za, 1048576)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        if gt(zb, 1048576)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x2a0, calldataload(0x24))\n        mstore(0x2c0, za)\n        mstore(0x2e0, zb)\n        hashCommitments(notes, n)\n        let b := add(0x300, mul(n, 0x80))\n        for {\n            let i := 0\n        }\n        lt(i, 3)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            switch gt(i, 1)\n            case 1 {\n                k := addmod(mulmod(calldataload(sub(noteIndex, add(0xc0, 0xc0))), zb, gen_order), mulmod(sub(gen_order, calldataload(sub(noteIndex, 0xc0))), za, gen_order), gen_order)\n            }\n            case 0 {\n                k := calldataload(noteIndex)\n            }\n            let x := mod(mload(0x00), gen_order)\n            k := mulmod(k, x, gen_order)\n            a := mulmod(a, x, gen_order)\n            c := mulmod(challenge, x, gen_order)\n            mstore(0x00, keccak256(0x00, 0x20))\n            validateCommitment(noteIndex, k, a)\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if eq(i, 0)\n            {\n                mstore(0x260, mload(0x20))\n                mstore(0x280, mload(0x40))\n                mstore(0x1e0, mload(0xe0))\n                mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n            }\n            if gt(i, 0)\n            {\n                mstore(0x60, c)\n                result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x220, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x220, 0x80, 0x260, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x1a0, 0x80, 0x1e0, 0x40))\n            }\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        validatePairing(0x84)\n        let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(t2)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let t2_x_1 := calldataload(t2)\n        let t2_x_2 := calldataload(add(t2, 0x20))\n        let t2_y_1 := calldataload(add(t2, 0x40))\n        let t2_y_2 := calldataload(add(t2, 0x60))\n        if or(or(or(or(or(or(or(iszero(t2_x_1), iszero(t2_x_2)), iszero(t2_y_1)), iszero(t2_y_2)), eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x20, mload(0x1e0))\n        mstore(0x40, mload(0x200))\n        mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(0xe0, mload(0x260))\n        mstore(0x100, mload(0x280))\n        mstore(0x140, t2_x_1)\n        mstore(0x120, t2_x_2)\n        mstore(0x180, t2_y_1)\n        mstore(0x160, t2_y_2)\n        let success := staticcall(gas(), 8, 0x20, 0x180, 0x20, 0x20)\n        if or(iszero(success), iszero(mload(0x20)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n    }\n}",
                  "src": "1407:17744:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1222,
                        "name": "DividendComputationABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1237,
                        "src": "19122:29:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_DividendComputationABIEncoder_$1237_$",
                          "typeString": "type(library DividendComputationABIEncoder)"
                        }
                      },
                      "id": 1224,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1236,
                      "src": "19122:43:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 1225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "19122:45:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1226,
                  "nodeType": "ExpressionStatement",
                  "src": "19122:45:6"
                }
              ]
            },
            "documentation": "@dev This will take any dividend calculation proof data and attempt to verify it in zero-knowledge\nIf the proof is not valid, the transaction will throw.\n@notice See DividendComputationInterface for how method calls should be constructed.\nDividendComputation is written in YUL to enable manual memory management and for other efficiency savings.*",
            "id": 1228,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1219,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1377:2:6"
            },
            "returnParameters": {
              "id": 1220,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1397:0:6"
            },
            "scope": 1229,
            "src": "1369:17805:6",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1230,
        "src": "943:18233:6"
      }
    ],
    "src": "0:19177:6"
  },
  "legacyAST": {
    "absolutePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/dividendComputation/DividendComputation.sol",
    "exportedSymbols": {
      "DividendComputation": [
        1229
      ],
      "DividendComputationInterface": [
        1218
      ]
    },
    "id": 1230,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1202,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:6"
      },
      {
        "absolutePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
        "file": "./DividendComputationABIEncoder.sol",
        "id": 1203,
        "nodeType": "ImportDirective",
        "scope": 1230,
        "sourceUnit": 1258,
        "src": "33:45:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1218,
        "linearizedBaseContracts": [
          1218
        ],
        "name": "DividendComputationInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1216,
              "nodeType": "Block",
              "src": "301:2:6",
              "statements": []
            },
            "documentation": null,
            "id": 1217,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateDividendComputation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1205,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1217,
                  "src": "170:14:6",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1204,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "170:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1207,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1217,
                  "src": "194:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1206,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "194:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1211,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1217,
                  "src": "211:16:6",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$6_calldata_ptr",
                    "typeString": "uint256[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1208,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "211:4:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1210,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 1209,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "216:1:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "211:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$6_storage_ptr",
                      "typeString": "uint256[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "160:73:6"
            },
            "returnParameters": {
              "id": 1215,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1214,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1217,
                  "src": "282:12:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1213,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "282:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "281:14:6"
            },
            "scope": 1218,
            "src": "124:179:6",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1230,
        "src": "81:224:6"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Library to validate AZTEC dividend computation proofs\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table \nto cache elliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC \ncan be treated as pure functions as this contract contains no storage and makes no external calls \n(other than to precompiles).\nCopyright Spilbury Holdings Ltd 2018. All rights reserved.*",
        "fullyImplemented": true,
        "id": 1229,
        "linearizedBaseContracts": [
          1229
        ],
        "name": "DividendComputation",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1227,
              "nodeType": "Block",
              "src": "1397:17777:6",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1221,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    validateDividendComputation()\n    function validateDividendComputation()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x184))\n        let n := calldataload(notes)\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x124), gen_order)\n        let za := mod(calldataload(0x144), gen_order)\n        let zb := mod(calldataload(0x164), gen_order)\n        if gt(za, 1048576)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        if gt(zb, 1048576)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x2a0, calldataload(0x24))\n        mstore(0x2c0, za)\n        mstore(0x2e0, zb)\n        hashCommitments(notes, n)\n        let b := add(0x300, mul(n, 0x80))\n        for {\n            let i := 0\n        }\n        lt(i, 3)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            switch gt(i, 1)\n            case 1 {\n                k := addmod(mulmod(calldataload(sub(noteIndex, add(0xc0, 0xc0))), zb, gen_order), mulmod(sub(gen_order, calldataload(sub(noteIndex, 0xc0))), za, gen_order), gen_order)\n            }\n            case 0 {\n                k := calldataload(noteIndex)\n            }\n            let x := mod(mload(0x00), gen_order)\n            k := mulmod(k, x, gen_order)\n            a := mulmod(a, x, gen_order)\n            c := mulmod(challenge, x, gen_order)\n            mstore(0x00, keccak256(0x00, 0x20))\n            validateCommitment(noteIndex, k, a)\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if eq(i, 0)\n            {\n                mstore(0x260, mload(0x20))\n                mstore(0x280, mload(0x40))\n                mstore(0x1e0, mload(0xe0))\n                mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n            }\n            if gt(i, 0)\n            {\n                mstore(0x60, c)\n                result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x220, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x220, 0x80, 0x260, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x1a0, 0x80, 0x1e0, 0x40))\n            }\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        validatePairing(0x84)\n        let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(t2)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let t2_x_1 := calldataload(t2)\n        let t2_x_2 := calldataload(add(t2, 0x20))\n        let t2_y_1 := calldataload(add(t2, 0x40))\n        let t2_y_2 := calldataload(add(t2, 0x60))\n        if or(or(or(or(or(or(or(iszero(t2_x_1), iszero(t2_x_2)), iszero(t2_y_1)), iszero(t2_y_2)), eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x20, mload(0x1e0))\n        mstore(0x40, mload(0x200))\n        mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(0xe0, mload(0x260))\n        mstore(0x100, mload(0x280))\n        mstore(0x140, t2_x_1)\n        mstore(0x120, t2_x_2)\n        mstore(0x180, t2_y_1)\n        mstore(0x160, t2_y_2)\n        let success := staticcall(gas(), 8, 0x20, 0x180, 0x20, 0x20)\n        if or(iszero(success), iszero(mload(0x20)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n    }\n}",
                  "src": "1407:17744:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1222,
                        "name": "DividendComputationABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1237,
                        "src": "19122:29:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_DividendComputationABIEncoder_$1237_$",
                          "typeString": "type(library DividendComputationABIEncoder)"
                        }
                      },
                      "id": 1224,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1236,
                      "src": "19122:43:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 1225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "19122:45:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1226,
                  "nodeType": "ExpressionStatement",
                  "src": "19122:45:6"
                }
              ]
            },
            "documentation": "@dev This will take any dividend calculation proof data and attempt to verify it in zero-knowledge\nIf the proof is not valid, the transaction will throw.\n@notice See DividendComputationInterface for how method calls should be constructed.\nDividendComputation is written in YUL to enable manual memory management and for other efficiency savings.*",
            "id": 1228,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1219,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1377:2:6"
            },
            "returnParameters": {
              "id": 1220,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1397:0:6"
            },
            "scope": 1229,
            "src": "1369:17805:6",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1230,
        "src": "943:18233:6"
      }
    ],
    "src": "0:19177:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-03T05:16:18.508Z",
  "devdoc": {
    "author": "AZTEC",
    "details": "Don't include this as an internal library. This contract uses a static memory table  to cache elliptic curve primitives and hashes. Calling this internally from another function will lead to memory mutation and undefined behaviour. The intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC  can be treated as pure functions as this contract contains no storage and makes no external calls  (other than to precompiles). Copyright Spilbury Holdings Ltd 2018. All rights reserved.*",
    "methods": {},
    "title": "Library to validate AZTEC dividend computation proofs"
  },
  "userdoc": {
    "methods": {}
  }
}