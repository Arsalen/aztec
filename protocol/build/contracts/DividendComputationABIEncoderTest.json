{
  "contractName": "DividendComputationABIEncoderTest",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256[6]"
        }
      ],
      "name": "validateDividendComputation",
      "outputs": [
        {
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610372806100206000396000f3fe608060405234801561001057600080fd5b5060043610610047577c01000000000000000000000000000000000000000000000000000000006000350463484b99d5811461004c575b600080fd5b6100d8600480360361010081101561006357600080fd5b81019060208101813564010000000081111561007e57600080fd5b82018360208201111561009057600080fd5b803590602001918460018302840111640100000000831117156100b257600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200161014d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101125781810151838201526020016100fa565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606061015761015f565b949350505050565b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260a06102005260006102405260008061026052610280856020820152602086026102c00160005b878110156102435760c0810260208b0101608060408201600037608060002060c05260a083528735602084015260c05160408401526040606084015260ff60020a600160608301351602604082013517608084015260ff60020a600160a0830135160260808201351760a08401528383036020830260408601015260c083019250506001810190506101b6565b50908103601f1981016102805260a00161022052858703602080830182905260409102820101865b888110156103185760c0810260208b0101602089830302860135806040880301356080604084016000378060a001855260208b85030289013560208601526080600020604086015280604001606086015260ff60020a6001602051160260005117608086015260ff60020a600160605116026040511760a08601528060208903830160c087013785850360208c86030260408801015260208551018501945050505060018101905061026b565b5060208282030382526102808103806080016101e0528060e001610180526020610160528061012001610160f3fea165627a7a72305820858366df144614515a7b78441face8eb6519fedd030707eeccb98374b45d20740029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b5060043610610047577c01000000000000000000000000000000000000000000000000000000006000350463484b99d5811461004c575b600080fd5b6100d8600480360361010081101561006357600080fd5b81019060208101813564010000000081111561007e57600080fd5b82018360208201111561009057600080fd5b803590602001918460018302840111640100000000831117156100b257600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200161014d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101125781810151838201526020016100fa565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606061015761015f565b949350505050565b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260a06102005260006102405260008061026052610280856020820152602086026102c00160005b878110156102435760c0810260208b0101608060408201600037608060002060c05260a083528735602084015260c05160408401526040606084015260ff60020a600160608301351602604082013517608084015260ff60020a600160a0830135160260808201351760a08401528383036020830260408601015260c083019250506001810190506101b6565b50908103601f1981016102805260a00161022052858703602080830182905260409102820101865b888110156103185760c0810260208b0101602089830302860135806040880301356080604084016000378060a001855260208b85030289013560208601526080600020604086015280604001606086015260ff60020a6001602051160260005117608086015260ff60020a600160605116026040511760a08601528060208903830160c087013785850360208c86030260408801015260208551018501945050505060018101905061026b565b5060208282030382526102808103806080016101e0528060e001610180526020610160528061012001610160f3fea165627a7a72305820858366df144614515a7b78441face8eb6519fedd030707eeccb98374b45d20740029",
  "sourceMap": "9535:294:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9535:294:7;;;;;;;",
  "deployedSourceMap": "9535:294:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9535:294:7;;;;;;;;;;;;;;;;;;;9584:243;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;9584:243:7;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;9584:243:7;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;9584:243:7;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;9584:243:7;;-1:-1:-1;9584:243:7;-1:-1:-1;9584:243:7;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;9584:243:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9746:12;9775:45;:43;:45::i;:::-;9584:243;;;;;;:::o;852:8678::-;1001:5;988:19;981:5;977:31;1043:5;1030:19;1071:1;1128:5;1115:19;1108:5;1104:31;1229:5;1216:19;1209:5;1205:31;1326:5;1313:19;1306:5;1302:31;3256:4;3249:5;3242:19;3335:4;3328:5;3321:19;3469:4;3462:5;3455:19;3608:4;3601:5;3594:19;3829:1;3857:7;3850:5;3843:22;3895:5;3996:1;3989:4;3979:8;3975:19;3968:30;4165:4;4162:1;4158:12;4151:5;4147:24;4200:1;4185:1945;4210:1;4207;4204:8;4185:1945;;;4299:4;4296:1;4292:12;4285:4;4278:5;4274:16;4270:35;4412:4;4405;4394:9;4390:20;4384:4;4371:46;4523:4;4517;4507:21;4501:4;4494:35;4601:4;4598:1;4591:15;4707:11;4694:25;4687:4;4684:1;4680:12;4673:47;4826:4;4820:11;4813:4;4810:1;4806:12;4799:33;4953:4;4946;4943:1;4939:12;4932:26;-1:-1:-1;;;5246:4:7;5238;5227:9;5223:20;5210:34;5206:45;5181:180;5153:4;5142:9;5138:20;5125:34;5101:278;5078:4;5075:1;5071:12;5047:350;-1:-1:-1;;;5685:4:7;5677;5666:9;5662:20;5649:34;5645:45;5620:180;5592:4;5581:9;5577:20;5564:34;5540:278;5517:4;5514:1;5510:12;5486:350;5991:8;5988:1;5984:16;5976:4;5973:1;5969:12;5962:4;5952:8;5948:19;5944:38;5937:64;6111:4;6108:1;6104:12;6099:17;;4235:1895;4227:4;4224:1;4220:12;4215:17;;4185:1945;;;-1:-1:-1;6219:16:7;;;-1:-1:-1;;6215:27:7;;6208:5;6201:42;6340:4;6336:27;6329:5;6322:42;6478:9;;;6237:4;6457:19;;;6450:38;;;6549:4;6555:20;;6538:39;;;6478:9;6619:2311;6644:1;6641;6638:8;6619:2311;;;6767:4;6764:1;6760:12;6753:4;6746:5;6742:16;6738:35;6896:4;6892:1;6889;6885:9;6881:20;6871:8;6867:35;6854:49;7020:13;7013:4;7003:8;6999:19;6995:39;6982:53;7143:4;7136;7125:9;7121:20;7115:4;7102:46;7250:14;7244:4;7240:25;7237:1;7230:36;7411:4;7407:1;7404;7400:9;7396:20;7382:12;7378:39;7365:53;7358:4;7355:1;7351:12;7344:75;7508:4;7502;7492:21;7485:4;7482:1;7478:12;7471:43;7622:14;7616:4;7612:25;7605:4;7602:1;7598:12;7591:47;-1:-1:-1;;;7904:4:7;7897;7891:11;7887:22;7854:177;7823:4;7817:11;7789:264;7762:4;7759:1;7755:12;7727:344;-1:-1:-1;;;8317:4:7;8310;8304:11;8300:22;8271:165;8244:4;8238:11;8214:240;8191:4;8188:1;8184:12;8160:312;8606:14;8598:4;8588:8;8584:19;8569:13;8565:39;8558:4;8555:1;8551:12;8538:83;8784:8;8781:1;8777:16;8769:4;8765:1;8762;8758:9;8754:20;8747:4;8737:8;8733:19;8729:46;8722:72;8910:4;8906:1;8900:8;8896:19;8893:1;8889:27;8884:32;;6669:2261;;;6661:4;6658:1;6654:12;6649:17;;6619:2311;;;6623:14;9052:4;9041:8;9038:1;9034:16;9030:27;9020:8;9013:45;9152:5;9149:1;9145:13;9195:11;9189:4;9185:22;9178:5;9171:37;9285:11;9279:4;9275:22;9268:5;9261:37;9427:4;9420:5;9413:19;9470:11;9463:5;9459:23;9452:5;9445:38",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\n\nlibrary DividendComputationABIEncoder {\n    /**\n    * New calldata map\n    * 0x04:0x24      = calldata location of proofData byte array  // proof data byte array\n    * 0x24:0x44      = message sender // address\n    * 0x44:0x64      = h_x     // crs\n    * 0x64:0x84      = h_y     // crs\n    * 0x84:0xa4      = t2_x0   // crs\n    * 0xa4:0xc4      = t2_x1   // crs\n    * 0xc4:0xe4      = t2_y0   // crs\n    * 0xe4:0x104     = t2_y1   // crs\n    * 0x104:0x124    = length of proofData byte array\n    * 0x124:0x144    = challenge\n    * 0x144:0x164    = za\n    * 0x164:0x184    = zb\n    * 0x184:0x1a4    = offset in byte array to notes\n    * 0x1a4:0x1c4    = offset in byte array to inputOwners\n    * 0x1c4:0x1e4    = offset in byte array to outputOwners\n    * 0x1e4:0x204    = offset in byte array to metadata\n    */ \n    function encodeAndExit() internal pure {\n        assembly {\n            // set up initial variables\n            let notes := add(0x104, calldataload(0x184))\n            let n := calldataload(notes)\n            let m := 1\n            let inputOwners := add(0x124, calldataload(0x1a4)) // one word after outputOwners = 1st\n            let outputOwners := add(0x124, calldataload(0x1c4)) // one word after outputOwners = 1st\n            let metadata := add(0x144, calldataload(0x1e4)) // two words after metadata = 1st\n\n\n            // `returndata` starts at 0x160\n            // `proofOutputs` starts at 0x180\n            // 0x160 - 0x180 = relative offset in returndata to first bytes argument (0x20)\n            // 0x180 - 0x1a0 = byte length of `proofOutputs`\n            // 0x1a0 - 0x1c0 = number of `proofOutputs` entries (1)\n            // 0x1c0 - 0x1e0 = relative memory offset between `v` and start of `proofOutput`\n\n            // `proofOutput` - t, starts at 0x1e0\n            // 0x1e0 - 0x200 = length of `proofOutput`\n            // 0x200 - 0x220 = relative offset between `t` and `inputNotes`\n            // 0x220 - 0x240 = relative offset between `t` and `outputNotes`\n            // 0x240 - 0x260 = `publicOwner`\n            // 0x260 - 0x280 = `publicValue`\n\n            // `inputNotes` starts at 0x280\n            // structure of `inputNotes` and `outputNotes`\n            // 0x00 - 0x20 = byte length of notes array\n            // 0x20 - 0x40 = number of notes `i`\n            // the next `i` consecutive blocks of 0x20-sized memory contain relative offset between\n            // start of notes array and the location of the `note`\n\n            // structure of a `note`\n            // 0x00 - 0x20 = size of `note`\n            // 0x20 - 0x40 = `owner`\n            // 0x40 - 0x60 = `noteHash`\n            // 0x60 - 0x80 = size of note `data`\n            // 0x80 - 0xa0 = compressed note coordinate `gamma` (part of `data`)\n            // 0xa0 - 0xc0 = compressed note coordinate `sigma` (part of `data`)\n            // 0xc0 - ???? = remaining note metadata\n\n            // `proofOutputs` must form a monolithic block of memory that we can return.\n            // `s` points to the memory location of the start of the current note\n            // `inputPtr` points to the start of the current `notes` dynamic bytes array\n\n            // length of proofOutputs is at s\n            mstore(0x1a0, 0x01)                            // number of proofs\n            mstore(0x1c0, 0x60)                            // offset to 1st proof\n            // length of proofOutput is at s + 0x60\n            mstore(0x200, 0xa0)                            // location of inputNotes\n            // location of outputNotes is at s + 0xa0\n            mstore(0x240, 0x00)             // publicOwner\n            // store kPublic. If kPublic is negative, store correct signed representation,\n            // relative to 2^256, not to the order of the bn128 group\n            let kPublic := 0\n            mstore(0x260, kPublic)\n\n            let inputPtr := 0x280                                 // point to inputNotes\n            mstore(add(inputPtr, 0x20), m)                        // number of input notes\n            // set note pointer, offsetting lookup indices for each input note\n            let s := add(0x2c0, mul(m, 0x20))\n\n            for { let i := 0 } lt(i, m) { i := add(i, 0x01) } {\n                let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n                // copy note data to 0x00 - 0x80\n                calldatacopy(0x00, add(noteIndex, 0x40), 0x80) // get gamma, sigma\n\n                // construct note hash\n                mstore(0xc0, keccak256(0x00, 0x80))\n\n                // store note length in `s`\n                mstore(s, 0xa0)\n                // store note owner in `s + 0x20`\n                mstore(add(s, 0x20), calldataload(inputOwners))\n            \n                // store note hash in `s + 0x40`\n                mstore(add(s, 0x40), mload(0xc0))\n                // store note metadata length in `s + 0x60` (just the coordinates)\n                mstore(add(s, 0x60), 0x40)\n                // store compressed note coordinate gamma in `s + 0x80`\n                mstore(\n                add(s, 0x80),\n                or(\n                    calldataload(add(noteIndex, 0x40)),\n                    mul(\n                    and(calldataload(add(noteIndex, 0x60)), 0x01),\n                    0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n                )\n                // store compressed note coordinate sigma in `s + 0xa0`\n                mstore(\n                add(s, 0xa0),\n                or(\n                    calldataload(add(noteIndex, 0x80)),\n                    mul(\n                    and(calldataload(add(noteIndex, 0xa0)), 0x01),\n                    0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n                )\n                // compute the relative offset to index this note in our returndata\n                mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr)) // relative offset to note\n        \n                // increase s by note length\n                s := add(s, 0xc0)\n            }\n\n            // transition between input and output notes\n            mstore(0x280, sub(sub(s, inputPtr), 0x20)) // store total length of inputNotes at first index of inputNotes \n            mstore(0x220, add(0xa0, sub(s, inputPtr))) // store relative memory offset to outputNotes\n            inputPtr := s\n            mstore(add(inputPtr, 0x20), sub(n, m)) // store number of output notes\n            s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n\n            // output notes\n            for { let i := m } lt(i, n) { i := add(i, 0x01) } {\n                // get note index\n                let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n                // get pointer to metadata\n                let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n                // get size of metadata\n                let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n\n                // copy note data to 0x00 - 0x80\n                calldatacopy(0x00, add(noteIndex, 0x40), 0x80) // get gamma, sigma\n\n                // store note length in `s`\n                mstore(s, add(0xa0, metadataLength))\n                // store the owner of the note in `s + 0x20`\n                mstore(add(s, 0x20), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n                // store note hash\n                mstore(add(s, 0x40), keccak256(0x00, 0x80))\n                // store note metadata length if `s + 0x60`\n                mstore(add(s, 0x60), add(0x40, metadataLength))\n                // store compressed note coordinate gamma in `s + 0x80`\n                mstore(\n                    add(s, 0x80),\n                    or(\n                        mload(0x00),\n                        mul(\n                            and(mload(0x20), 0x01),\n                            0x8000000000000000000000000000000000000000000000000000000000000000\n                        )\n                    )\n                )\n                // store compressed note coordinate sigma in `s + 0xa0`\n                mstore(\n                add(s, 0xa0),\n                or(\n                    mload(0x40),\n                    mul(\n                        and(mload(0x60), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n                )\n                // copy metadata into `s + 0xc0`\n                calldatacopy(add(s, 0xc0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n                // compute the relative offset to index this note in our returndata\n                mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr)) // relative offset to note\n\n                // increase s by note length\n                s := add(s, add(mload(s), 0x20))\n            }\n\n            // cleanup. the length of the outputNotes = s - inputPtr\n            mstore(inputPtr, sub(sub(s, inputPtr), 0x20)) // store length of outputNotes at start of outputNotes\n            let notesLength := sub(s, 0x280)\n            mstore(0x1e0, add(0x80, notesLength)) // store length of proofOutput at 0x160\n            mstore(0x180, add(0xe0, notesLength)) // store length of proofOutputs at 0x100\n            // mstore(0x00 , notesLength) return(0x00, 0x20)\n            mstore(0x160, 0x20)\n            return(0x160, add(0x120, notesLength)) // return the final byte array\n        }\n    }\n}\n\n\ncontract DividendComputationABIEncoderTest {\n    function validateDividendComputation(\n        bytes calldata, \n        address, \n        uint[6] calldata\n    ) \n        external \n        pure \n        returns (bytes memory) \n    {\n        DividendComputationABIEncoder.encodeAndExit();\n    }\n}\n",
  "sourcePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
  "ast": {
    "absolutePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
    "exportedSymbols": {
      "DividendComputationABIEncoder": [
        1237
      ],
      "DividendComputationABIEncoderTest": [
        1257
      ]
    },
    "id": 1258,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1231,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:7"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1237,
        "linearizedBaseContracts": [
          1237
        ],
        "name": "DividendComputationABIEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1235,
              "nodeType": "Block",
              "src": "891:8639:7",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1234,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let notes := add(0x104, calldataload(0x184))\n    let n := calldataload(notes)\n    let m := 1\n    let inputOwners := add(0x124, calldataload(0x1a4))\n    let outputOwners := add(0x124, calldataload(0x1c4))\n    let metadata := add(0x144, calldataload(0x1e4))\n    mstore(0x1a0, 0x01)\n    mstore(0x1c0, 0x60)\n    mstore(0x200, 0xa0)\n    mstore(0x240, 0x00)\n    let kPublic := 0\n    mstore(0x260, kPublic)\n    let inputPtr := 0x280\n    mstore(add(inputPtr, 0x20), m)\n    let s := add(0x2c0, mul(m, 0x20))\n    for {\n        let i := 0\n    }\n    lt(i, m)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        calldatacopy(0x00, add(noteIndex, 0x40), 0x80)\n        mstore(0xc0, keccak256(0x00, 0x80))\n        mstore(s, 0xa0)\n        mstore(add(s, 0x20), calldataload(inputOwners))\n        mstore(add(s, 0x40), mload(0xc0))\n        mstore(add(s, 0x60), 0x40)\n        mstore(add(s, 0x80), or(calldataload(add(noteIndex, 0x40)), mul(and(calldataload(add(noteIndex, 0x60)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xa0), or(calldataload(add(noteIndex, 0x80)), mul(and(calldataload(add(noteIndex, 0xa0)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr))\n        s := add(s, 0xc0)\n    }\n    mstore(0x280, sub(sub(s, inputPtr), 0x20))\n    mstore(0x220, add(0xa0, sub(s, inputPtr)))\n    inputPtr := s\n    mstore(add(inputPtr, 0x20), sub(n, m))\n    s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n    for {\n        let i := m\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n        let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        calldatacopy(0x00, add(noteIndex, 0x40), 0x80)\n        mstore(s, add(0xa0, metadataLength))\n        mstore(add(s, 0x20), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n        mstore(add(s, 0x40), keccak256(0x00, 0x80))\n        mstore(add(s, 0x60), add(0x40, metadataLength))\n        mstore(add(s, 0x80), or(mload(0x00), mul(and(mload(0x20), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xa0), or(mload(0x40), mul(and(mload(0x60), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        calldatacopy(add(s, 0xc0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    let notesLength := sub(s, 0x280)\n    mstore(0x1e0, add(0x80, notesLength))\n    mstore(0x180, add(0xe0, notesLength))\n    mstore(0x160, 0x20)\n    return(0x160, add(0x120, notesLength))\n}",
                  "src": "901:8629:7"
                }
              ]
            },
            "documentation": "New calldata map\n0x04:0x24      = calldata location of proofData byte array  // proof data byte array\n0x24:0x44      = message sender // address\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = za\n0x164:0x184    = zb\n0x184:0x1a4    = offset in byte array to notes\n0x1a4:0x1c4    = offset in byte array to inputOwners\n0x1c4:0x1e4    = offset in byte array to outputOwners\n0x1e4:0x204    = offset in byte array to metadata",
            "id": 1236,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "encodeAndExit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1232,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "874:2:7"
            },
            "returnParameters": {
              "id": 1233,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "891:0:7"
            },
            "scope": 1237,
            "src": "852:8678:7",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1258,
        "src": "34:9498:7"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1257,
        "linearizedBaseContracts": [
          1257
        ],
        "name": "DividendComputationABIEncoderTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1255,
              "nodeType": "Block",
              "src": "9765:62:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1250,
                        "name": "DividendComputationABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1237,
                        "src": "9775:29:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_DividendComputationABIEncoder_$1237_$",
                          "typeString": "type(library DividendComputationABIEncoder)"
                        }
                      },
                      "id": 1252,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1236,
                      "src": "9775:43:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 1253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9775:45:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1254,
                  "nodeType": "ExpressionStatement",
                  "src": "9775:45:7"
                }
              ]
            },
            "documentation": null,
            "id": 1256,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateDividendComputation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1246,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1239,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "9630:14:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1238,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9630:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1241,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "9655:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1240,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9655:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1245,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "9673:16:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$6_calldata_ptr",
                    "typeString": "uint256[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1242,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "9673:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1244,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 1243,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9678:1:7",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "9673:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$6_storage_ptr",
                      "typeString": "uint256[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9620:75:7"
            },
            "returnParameters": {
              "id": 1249,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1248,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "9746:12:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1247,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9746:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9745:14:7"
            },
            "scope": 1257,
            "src": "9584:243:7",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1258,
        "src": "9535:294:7"
      }
    ],
    "src": "0:9830:7"
  },
  "legacyAST": {
    "absolutePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
    "exportedSymbols": {
      "DividendComputationABIEncoder": [
        1237
      ],
      "DividendComputationABIEncoderTest": [
        1257
      ]
    },
    "id": 1258,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1231,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:7"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1237,
        "linearizedBaseContracts": [
          1237
        ],
        "name": "DividendComputationABIEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1235,
              "nodeType": "Block",
              "src": "891:8639:7",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1234,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let notes := add(0x104, calldataload(0x184))\n    let n := calldataload(notes)\n    let m := 1\n    let inputOwners := add(0x124, calldataload(0x1a4))\n    let outputOwners := add(0x124, calldataload(0x1c4))\n    let metadata := add(0x144, calldataload(0x1e4))\n    mstore(0x1a0, 0x01)\n    mstore(0x1c0, 0x60)\n    mstore(0x200, 0xa0)\n    mstore(0x240, 0x00)\n    let kPublic := 0\n    mstore(0x260, kPublic)\n    let inputPtr := 0x280\n    mstore(add(inputPtr, 0x20), m)\n    let s := add(0x2c0, mul(m, 0x20))\n    for {\n        let i := 0\n    }\n    lt(i, m)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        calldatacopy(0x00, add(noteIndex, 0x40), 0x80)\n        mstore(0xc0, keccak256(0x00, 0x80))\n        mstore(s, 0xa0)\n        mstore(add(s, 0x20), calldataload(inputOwners))\n        mstore(add(s, 0x40), mload(0xc0))\n        mstore(add(s, 0x60), 0x40)\n        mstore(add(s, 0x80), or(calldataload(add(noteIndex, 0x40)), mul(and(calldataload(add(noteIndex, 0x60)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xa0), or(calldataload(add(noteIndex, 0x80)), mul(and(calldataload(add(noteIndex, 0xa0)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr))\n        s := add(s, 0xc0)\n    }\n    mstore(0x280, sub(sub(s, inputPtr), 0x20))\n    mstore(0x220, add(0xa0, sub(s, inputPtr)))\n    inputPtr := s\n    mstore(add(inputPtr, 0x20), sub(n, m))\n    s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n    for {\n        let i := m\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n        let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        calldatacopy(0x00, add(noteIndex, 0x40), 0x80)\n        mstore(s, add(0xa0, metadataLength))\n        mstore(add(s, 0x20), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n        mstore(add(s, 0x40), keccak256(0x00, 0x80))\n        mstore(add(s, 0x60), add(0x40, metadataLength))\n        mstore(add(s, 0x80), or(mload(0x00), mul(and(mload(0x20), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xa0), or(mload(0x40), mul(and(mload(0x60), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        calldatacopy(add(s, 0xc0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    let notesLength := sub(s, 0x280)\n    mstore(0x1e0, add(0x80, notesLength))\n    mstore(0x180, add(0xe0, notesLength))\n    mstore(0x160, 0x20)\n    return(0x160, add(0x120, notesLength))\n}",
                  "src": "901:8629:7"
                }
              ]
            },
            "documentation": "New calldata map\n0x04:0x24      = calldata location of proofData byte array  // proof data byte array\n0x24:0x44      = message sender // address\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = za\n0x164:0x184    = zb\n0x184:0x1a4    = offset in byte array to notes\n0x1a4:0x1c4    = offset in byte array to inputOwners\n0x1c4:0x1e4    = offset in byte array to outputOwners\n0x1e4:0x204    = offset in byte array to metadata",
            "id": 1236,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "encodeAndExit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1232,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "874:2:7"
            },
            "returnParameters": {
              "id": 1233,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "891:0:7"
            },
            "scope": 1237,
            "src": "852:8678:7",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1258,
        "src": "34:9498:7"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1257,
        "linearizedBaseContracts": [
          1257
        ],
        "name": "DividendComputationABIEncoderTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1255,
              "nodeType": "Block",
              "src": "9765:62:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1250,
                        "name": "DividendComputationABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1237,
                        "src": "9775:29:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_DividendComputationABIEncoder_$1237_$",
                          "typeString": "type(library DividendComputationABIEncoder)"
                        }
                      },
                      "id": 1252,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1236,
                      "src": "9775:43:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 1253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9775:45:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1254,
                  "nodeType": "ExpressionStatement",
                  "src": "9775:45:7"
                }
              ]
            },
            "documentation": null,
            "id": 1256,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateDividendComputation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1246,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1239,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "9630:14:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1238,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9630:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1241,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "9655:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1240,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9655:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1245,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "9673:16:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$6_calldata_ptr",
                    "typeString": "uint256[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1242,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "9673:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1244,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 1243,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9678:1:7",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "9673:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$6_storage_ptr",
                      "typeString": "uint256[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9620:75:7"
            },
            "returnParameters": {
              "id": 1249,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1248,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "9746:12:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1247,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9746:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9745:14:7"
            },
            "scope": 1257,
            "src": "9584:243:7",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1258,
        "src": "9535:294:7"
      }
    ],
    "src": "0:9830:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-03T05:16:18.510Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}