{
  "contractName": "BilateralSwapABIEncoder",
  "abi": [],
  "bytecode": "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820b108966a7ea26908632d85304d22888901f0c23f99f5e8e3eb74408f92a5d13a0029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820b108966a7ea26908632d85304d22888901f0c23f99f5e8e3eb74408f92a5d13a0029",
  "sourceMap": "34:10144:5:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24",
  "deployedSourceMap": "34:10144:5:-;;;;;;;;",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\n\nlibrary BilateralSwapABIEncoder {\n    /**\n    * New calldata map\n    * 0x04:0x24      = calldata location of proofData byte array - pointer to the proofData. \n    * 0x24:0x44      = message sender // sender\n    * 0x44:0x64      = h_x     // crs\n    * 0x64:0x84      = h_y     // crs\n    * 0x84:0xa4      = t2_x0   // crs\n    * 0xa4:0xc4      = t2_x1   // crs\n    * 0xa4:0xc4      = t2_x1   // crs\n    * 0xc4:0xe4      = t2_y0   // crs\n    * 0xe4:0x104     = t2_y1   // crs\n    * 0x104:0x124    = length of proofData byte array \n    * 0x124:0x144    = challenge\n    * 0x144:0x164    = offset in byte array to notes\n    * 0x164:0x184    = offset in byte array to inputOwners\n    * 0x184:0x1a4    = offset in byte array to outputOwners\n    * 0x1a4:0x1c4    = offset in byte array to metadata\n    **/\n\n    function encodeAndExit() internal pure {\n        assembly {\n            // set up initial variables\n            let notes := add(0x104, calldataload(0x144))\n            let m := 2 // input notes\n            let n := calldataload(notes)\n            let inputOwners := add(0x124, calldataload(0x164)) // // one word after inputOwners = 1st\n            let outputOwners := add(0x124, calldataload(0x184)) // one word after outputOwners = 1st\n            let metadata := add(0x144, calldataload(0x1a4)) // two words after metadata = 1st\n\n            // memory map of `proofOutputs`\n            // 0x00 - 0x160  = scratch data for EIP712 signature computation and note hash computation\n            // ACE_NOTE_SIGNATURE struct hash variables\n            // 0x80 = struct hash\n            // 0xa0 = proofId (1)\n            // 0xc0 = noteHash\n            // 0xe0 = challenge\n            // 0x100 = sender\n            // struct hash of 'ACE_NOTE_SIGNATURE'\n            mstore(0x80, 0x6c1a087ea32e7586c4241d8ad29826c79af0e5ae5c44ca4be88caa5a18b99446)\n            mstore(0xa0, 0x01)\n            mstore(0xe0, calldataload(0x124)) // challenge\n            mstore(0x100, calldataload(0x24))\n\n            // EIP712 Signature variables\n            // 0x13e - 0x140 = 0x1901\n            // 0x140 - 0x160 = domainHash\n            // 0x160 - 0x180 = structHash\n            mstore(0x120, 0x1901)\n\n            // `returndata` starts at 0x160\n            // `proofOutputs` starts at 0x180\n            // 0x160 - 0x180 = relative offset in returndata to first bytes argument (0x20)\n            // 0x180 - 0x1a0 = byte length of `proofOutputs`\n            // 0x1a0 - 0x1c0 = number of `proofOutputs` entries (1)\n            // 0x1c0 - 0x1e0 = relative memory offset between `v` and start of `proofOutput`\n\n            // `proofOutput` - t, starts at 0x1e0\n            // 0x1e0 - 0x200 = length of `proofOutput`\n            // 0x200 - 0x220 = relative offset between `t` and `inputNotes`\n            // 0x220 - 0x240 = relative offset between `t` and `outputNotes`\n            // 0x240 - 0x260 = `publicOwner`\n            // 0x260 - 0x280 = `publicValue`\n\n            // `inputNotes` starts at 0x280\n            // structure of `inputNotes` and `outputNotes`\n            // 0x00 - 0x20 = byte length of notes array\n            // 0x20 - 0x40 = number of notes `i`\n            // the next `i` consecutive blocks of 0x20-sized memory contain relative offset between\n            // start of notes array and the location of the `note`\n\n            // structure of a `note`\n            // 0x00 - 0x20 = size of `note`\n            // 0x20 - 0x40 = `owner`\n            // 0x40 - 0x60 = `noteHash`\n            // 0x60 - 0x80 = size of note `data`\n            // 0x80 - 0xa0 = compressed note coordinate `gamma` (part of `data`)\n            // 0xa0 - 0xc0 = compressed note coordinate `sigma` (part of `data`)\n            // 0xc0 - ???? = remaining note metadata\n\n            // `proofOutputs` must form a monolithic block of memory that we can return.\n            // `s` points to the memory location of the start of the current note\n            // `inputPtr` points to the start of the current `notes` dynamic bytes array\n\n            // length of proofOutputs is at s\n            mstore(0x1a0, 0x01)                            // number of proofs\n            mstore(0x1c0, 0x60)                            // offset to 1st proof\n            // length of proofOutput is at s + 0x60\n            mstore(0x200, 0xa0)                            // location of inputNotes\n            mstore(0x240, 0x00)             // publicOwner\n \n            let kPublic := 0\n            mstore(0x260, kPublic)\n\n            let inputPtr := 0x280                                 // point to inputNotes\n            mstore(add(inputPtr, 0x20), m)                        // number of input notes\n\n            // set note pointer, offsetting lookup indices for each input note\n            let s := add(0x2c0, mul(m, 0x20))\n\n            for { let i := 0 } lt(i, m) { i := add(i, 0x01) } {\n                let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n\n                // copy note data to 0x00 - 0x80\n                calldatacopy(0x00, add(noteIndex, 0x40), 0x80) // get gamma, sigma\n\n                // construct hash of note data\n                mstore(0xc0, keccak256(0x00, 0x80)) \n\n                // store note length in `s`\n                mstore(s, 0xa0)\n                // store note owner in `s + 0x20`. If there is no owners, or signing address is `0`, throw an error\n                mstore(add(s, 0x20), calldataload(add(inputOwners, mul(i, 0x20))))\n                \n                // store note hash in `s + 0x40`\n                mstore(add(s, 0x40), mload(0xc0))\n                // store note metadata length in `s + 0x60` (just the coordinates)\n                mstore(add(s, 0x60), 0x40)\n                // store compressed note coordinate gamma in `s + 0x80`\n                mstore(\n                add(s, 0x80),\n                or(\n                    calldataload(add(noteIndex, 0x40)),\n                    mul(\n                    and(calldataload(add(noteIndex, 0x60)), 0x01),\n                    0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n                )\n                // store compressed note coordinate sigma in `s + 0xa0`\n                mstore(\n                add(s, 0xa0),\n                or(\n                    calldataload(add(noteIndex, 0x80)),\n                    mul(\n                    and(calldataload(add(noteIndex, 0xa0)), 0x01),\n                    0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n                )\n                // compute the relative offset to index this note in our returndata\n                mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr)) // relative offset to note\n        \n                // increase s by note length\n                s := add(s, 0xc0)\n\n            }\n\n            // transition between input and output notes\n            mstore(0x280, sub(sub(s, inputPtr), 0x20)) // store total length of inputNotes at first index of inputNotes \n            mstore(0x220, add(0xa0, sub(s, inputPtr))) // store relative memory offset to outputNotes\n            inputPtr := s\n            mstore(add(inputPtr, 0x20), sub(n, m)) // store number of output notes\n            s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n\n            for { let i := m } lt(i, n) { i := add(i, 0x01) } {\n                // get note index\n                let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n\n                // get pointer to metadata\n                let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n \n                // get size of metadata\n                let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n\n                // copy note data to 0x00 - 0x80\n                calldatacopy(0x00, add(noteIndex, 0x40), 0x80) // get gamma, sigma\n\n                // store note length in `s`\n                mstore(s, add(0xa0, metadataLength))\n                // store the owner of the note in `s + 0x20`\n                mstore(add(s, 0x20), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n                // store note hash\n                mstore(add(s, 0x40), keccak256(0x00, 0x80))\n                // store note metadata length if `s + 0x60`\n                mstore(add(s, 0x60), add(0x40, metadataLength))\n                // store compressed note coordinate gamma in `s + 0x80`\n                mstore(\n                    add(s, 0x80),\n                    or(\n                        mload(0x00),\n                        mul(\n                            and(mload(0x20), 0x01),\n                            0x8000000000000000000000000000000000000000000000000000000000000000\n                        )\n                    )\n                )\n                // store compressed note coordinate sigma in `s + 0xa0`\n                mstore(\n                add(s, 0xa0),\n                or(\n                    mload(0x40),\n                    mul(\n                        and(mload(0x60), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n                )\n                // copy metadata into `s + 0xc0`\n                calldatacopy(add(s, 0xc0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n                // compute the relative offset to index this note in our returndata\n                mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr)) // relative offset to note\n\n                // increase s by note length\n                s := add(s, add(mload(s), 0x20))\n            }\n\n            // cleanup. the length of the outputNotes = s - inputPtr\n            mstore(inputPtr, sub(sub(s, inputPtr), 0x20)) // store length of outputNotes at start of outputNotes\n            let notesLength := sub(s, 0x280)\n            mstore(0x1e0, add(0x80, notesLength)) // store length of proofOutput at 0x160\n            mstore(0x180, add(0xe0, notesLength)) // store length of proofOutputs at 0x100\n            mstore(0x160, 0x20)\n            return(0x160, add(0x120, notesLength)) // return the final byte array\n        }\n    }\n}\n\n\ncontract BilateralSwapABIEncoderTest {\n    function validateBilateralSwap(\n        bytes calldata, \n        address, \n        uint[6] calldata\n    ) \n        external \n        pure \n        returns (bytes memory) \n    {\n        BilateralSwapABIEncoder.encodeAndExit();\n    }\n}\n",
  "sourcePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwapABIEncoder.sol",
  "ast": {
    "absolutePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwapABIEncoder.sol",
    "exportedSymbols": {
      "BilateralSwapABIEncoder": [
        1180
      ],
      "BilateralSwapABIEncoderTest": [
        1200
      ]
    },
    "id": 1201,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1174,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:5"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1180,
        "linearizedBaseContracts": [
          1180
        ],
        "name": "BilateralSwapABIEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1178,
              "nodeType": "Block",
              "src": "875:9301:5",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1177,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let notes := add(0x104, calldataload(0x144))\n    let m := 2\n    let n := calldataload(notes)\n    let inputOwners := add(0x124, calldataload(0x164))\n    let outputOwners := add(0x124, calldataload(0x184))\n    let metadata := add(0x144, calldataload(0x1a4))\n    mstore(0x80, 0x6c1a087ea32e7586c4241d8ad29826c79af0e5ae5c44ca4be88caa5a18b99446)\n    mstore(0xa0, 0x01)\n    mstore(0xe0, calldataload(0x124))\n    mstore(0x100, calldataload(0x24))\n    mstore(0x120, 0x1901)\n    mstore(0x1a0, 0x01)\n    mstore(0x1c0, 0x60)\n    mstore(0x200, 0xa0)\n    mstore(0x240, 0x00)\n    let kPublic := 0\n    mstore(0x260, kPublic)\n    let inputPtr := 0x280\n    mstore(add(inputPtr, 0x20), m)\n    let s := add(0x2c0, mul(m, 0x20))\n    for {\n        let i := 0\n    }\n    lt(i, m)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        calldatacopy(0x00, add(noteIndex, 0x40), 0x80)\n        mstore(0xc0, keccak256(0x00, 0x80))\n        mstore(s, 0xa0)\n        mstore(add(s, 0x20), calldataload(add(inputOwners, mul(i, 0x20))))\n        mstore(add(s, 0x40), mload(0xc0))\n        mstore(add(s, 0x60), 0x40)\n        mstore(add(s, 0x80), or(calldataload(add(noteIndex, 0x40)), mul(and(calldataload(add(noteIndex, 0x60)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xa0), or(calldataload(add(noteIndex, 0x80)), mul(and(calldataload(add(noteIndex, 0xa0)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr))\n        s := add(s, 0xc0)\n    }\n    mstore(0x280, sub(sub(s, inputPtr), 0x20))\n    mstore(0x220, add(0xa0, sub(s, inputPtr)))\n    inputPtr := s\n    mstore(add(inputPtr, 0x20), sub(n, m))\n    s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n    for {\n        let i := m\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n        let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        calldatacopy(0x00, add(noteIndex, 0x40), 0x80)\n        mstore(s, add(0xa0, metadataLength))\n        mstore(add(s, 0x20), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n        mstore(add(s, 0x40), keccak256(0x00, 0x80))\n        mstore(add(s, 0x60), add(0x40, metadataLength))\n        mstore(add(s, 0x80), or(mload(0x00), mul(and(mload(0x20), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xa0), or(mload(0x40), mul(and(mload(0x60), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        calldatacopy(add(s, 0xc0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    let notesLength := sub(s, 0x280)\n    mstore(0x1e0, add(0x80, notesLength))\n    mstore(0x180, add(0xe0, notesLength))\n    mstore(0x160, 0x20)\n    return(0x160, add(0x120, notesLength))\n}",
                  "src": "885:9291:5"
                }
              ]
            },
            "documentation": "New calldata map\n0x04:0x24      = calldata location of proofData byte array - pointer to the proofData. \n0x24:0x44      = message sender // sender\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array \n0x124:0x144    = challenge\n0x144:0x164    = offset in byte array to notes\n0x164:0x184    = offset in byte array to inputOwners\n0x184:0x1a4    = offset in byte array to outputOwners\n0x1a4:0x1c4    = offset in byte array to metadata*",
            "id": 1179,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "encodeAndExit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1175,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "858:2:5"
            },
            "returnParameters": {
              "id": 1176,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "875:0:5"
            },
            "scope": 1180,
            "src": "836:9340:5",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1201,
        "src": "34:10144:5"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1200,
        "linearizedBaseContracts": [
          1200
        ],
        "name": "BilateralSwapABIEncoderTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1198,
              "nodeType": "Block",
              "src": "10399:56:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1193,
                        "name": "BilateralSwapABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1180,
                        "src": "10409:23:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_BilateralSwapABIEncoder_$1180_$",
                          "typeString": "type(library BilateralSwapABIEncoder)"
                        }
                      },
                      "id": 1195,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1179,
                      "src": "10409:37:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 1196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10409:39:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1197,
                  "nodeType": "ExpressionStatement",
                  "src": "10409:39:5"
                }
              ]
            },
            "documentation": null,
            "id": 1199,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateBilateralSwap",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1189,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1182,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1199,
                  "src": "10264:14:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1181,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10264:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1184,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1199,
                  "src": "10289:7:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1183,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10289:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1188,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1199,
                  "src": "10307:16:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$6_calldata_ptr",
                    "typeString": "uint256[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1185,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "10307:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1187,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 1186,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10312:1:5",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "10307:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$6_storage_ptr",
                      "typeString": "uint256[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10254:75:5"
            },
            "returnParameters": {
              "id": 1192,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1191,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1199,
                  "src": "10380:12:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1190,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10380:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10379:14:5"
            },
            "scope": 1200,
            "src": "10224:231:5",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1201,
        "src": "10181:276:5"
      }
    ],
    "src": "0:10458:5"
  },
  "legacyAST": {
    "absolutePath": "/home/arsalen/Desktop/draft/AZTECProtocol/aztec-demo-js/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwapABIEncoder.sol",
    "exportedSymbols": {
      "BilateralSwapABIEncoder": [
        1180
      ],
      "BilateralSwapABIEncoderTest": [
        1200
      ]
    },
    "id": 1201,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1174,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:5"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1180,
        "linearizedBaseContracts": [
          1180
        ],
        "name": "BilateralSwapABIEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1178,
              "nodeType": "Block",
              "src": "875:9301:5",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1177,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let notes := add(0x104, calldataload(0x144))\n    let m := 2\n    let n := calldataload(notes)\n    let inputOwners := add(0x124, calldataload(0x164))\n    let outputOwners := add(0x124, calldataload(0x184))\n    let metadata := add(0x144, calldataload(0x1a4))\n    mstore(0x80, 0x6c1a087ea32e7586c4241d8ad29826c79af0e5ae5c44ca4be88caa5a18b99446)\n    mstore(0xa0, 0x01)\n    mstore(0xe0, calldataload(0x124))\n    mstore(0x100, calldataload(0x24))\n    mstore(0x120, 0x1901)\n    mstore(0x1a0, 0x01)\n    mstore(0x1c0, 0x60)\n    mstore(0x200, 0xa0)\n    mstore(0x240, 0x00)\n    let kPublic := 0\n    mstore(0x260, kPublic)\n    let inputPtr := 0x280\n    mstore(add(inputPtr, 0x20), m)\n    let s := add(0x2c0, mul(m, 0x20))\n    for {\n        let i := 0\n    }\n    lt(i, m)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        calldatacopy(0x00, add(noteIndex, 0x40), 0x80)\n        mstore(0xc0, keccak256(0x00, 0x80))\n        mstore(s, 0xa0)\n        mstore(add(s, 0x20), calldataload(add(inputOwners, mul(i, 0x20))))\n        mstore(add(s, 0x40), mload(0xc0))\n        mstore(add(s, 0x60), 0x40)\n        mstore(add(s, 0x80), or(calldataload(add(noteIndex, 0x40)), mul(and(calldataload(add(noteIndex, 0x60)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xa0), or(calldataload(add(noteIndex, 0x80)), mul(and(calldataload(add(noteIndex, 0xa0)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr))\n        s := add(s, 0xc0)\n    }\n    mstore(0x280, sub(sub(s, inputPtr), 0x20))\n    mstore(0x220, add(0xa0, sub(s, inputPtr)))\n    inputPtr := s\n    mstore(add(inputPtr, 0x20), sub(n, m))\n    s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n    for {\n        let i := m\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n        let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        calldatacopy(0x00, add(noteIndex, 0x40), 0x80)\n        mstore(s, add(0xa0, metadataLength))\n        mstore(add(s, 0x20), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n        mstore(add(s, 0x40), keccak256(0x00, 0x80))\n        mstore(add(s, 0x60), add(0x40, metadataLength))\n        mstore(add(s, 0x80), or(mload(0x00), mul(and(mload(0x20), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xa0), or(mload(0x40), mul(and(mload(0x60), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        calldatacopy(add(s, 0xc0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    let notesLength := sub(s, 0x280)\n    mstore(0x1e0, add(0x80, notesLength))\n    mstore(0x180, add(0xe0, notesLength))\n    mstore(0x160, 0x20)\n    return(0x160, add(0x120, notesLength))\n}",
                  "src": "885:9291:5"
                }
              ]
            },
            "documentation": "New calldata map\n0x04:0x24      = calldata location of proofData byte array - pointer to the proofData. \n0x24:0x44      = message sender // sender\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array \n0x124:0x144    = challenge\n0x144:0x164    = offset in byte array to notes\n0x164:0x184    = offset in byte array to inputOwners\n0x184:0x1a4    = offset in byte array to outputOwners\n0x1a4:0x1c4    = offset in byte array to metadata*",
            "id": 1179,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "encodeAndExit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1175,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "858:2:5"
            },
            "returnParameters": {
              "id": 1176,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "875:0:5"
            },
            "scope": 1180,
            "src": "836:9340:5",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1201,
        "src": "34:10144:5"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1200,
        "linearizedBaseContracts": [
          1200
        ],
        "name": "BilateralSwapABIEncoderTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1198,
              "nodeType": "Block",
              "src": "10399:56:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1193,
                        "name": "BilateralSwapABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1180,
                        "src": "10409:23:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_BilateralSwapABIEncoder_$1180_$",
                          "typeString": "type(library BilateralSwapABIEncoder)"
                        }
                      },
                      "id": 1195,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1179,
                      "src": "10409:37:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 1196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10409:39:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1197,
                  "nodeType": "ExpressionStatement",
                  "src": "10409:39:5"
                }
              ]
            },
            "documentation": null,
            "id": 1199,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateBilateralSwap",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1189,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1182,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1199,
                  "src": "10264:14:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1181,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10264:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1184,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1199,
                  "src": "10289:7:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1183,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10289:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1188,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1199,
                  "src": "10307:16:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$6_calldata_ptr",
                    "typeString": "uint256[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1185,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "10307:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1187,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 1186,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10312:1:5",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "10307:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$6_storage_ptr",
                      "typeString": "uint256[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10254:75:5"
            },
            "returnParameters": {
              "id": 1192,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1191,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1199,
                  "src": "10380:12:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1190,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10380:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10379:14:5"
            },
            "scope": 1200,
            "src": "10224:231:5",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1201,
        "src": "10181:276:5"
      }
    ],
    "src": "0:10458:5"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-03T05:16:18.508Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}